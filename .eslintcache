[{"C:\\Users\\Tanya\\Documents\\IT\\Knopka's Projects\\password-generator\\src\\index.js":"1","C:\\Users\\Tanya\\Documents\\IT\\Knopka's Projects\\password-generator\\src\\App.js":"2","C:\\Users\\Tanya\\Documents\\IT\\Knopka's Projects\\password-generator\\src\\reportWebVitals.js":"3","C:\\Users\\Tanya\\Documents\\IT\\Knopka's Projects\\password-generator\\src\\Generator.js":"4"},{"size":500,"mtime":1637795457242,"results":"5","hashOfConfig":"6"},{"size":218,"mtime":1638197688578,"results":"7","hashOfConfig":"6"},{"size":362,"mtime":1637795462940,"results":"8","hashOfConfig":"6"},{"size":2679,"mtime":1638200078956,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"12"},"1n9f52x",{"filePath":"13","messages":"14","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"15","messages":"16","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"12"},{"filePath":"17","messages":"18","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"19"},"C:\\Users\\Tanya\\Documents\\IT\\Knopka's Projects\\password-generator\\src\\index.js",[],["20","21"],"C:\\Users\\Tanya\\Documents\\IT\\Knopka's Projects\\password-generator\\src\\App.js",[],"C:\\Users\\Tanya\\Documents\\IT\\Knopka's Projects\\password-generator\\src\\reportWebVitals.js",[],"C:\\Users\\Tanya\\Documents\\IT\\Knopka's Projects\\password-generator\\src\\Generator.js",["22"],"import React, { useState } from 'react';\r\n\r\nconst Generator = (props) => {\r\n  const [numChars, setNumChars] = useState(8);\r\n  const [pass, setPass] = useState(['Password']);\r\n  const upper = [\r\n    'A',\r\n    'B',\r\n    'C',\r\n    'D',\r\n    'E',\r\n    'F',\r\n    'G',\r\n    'H',\r\n    'I',\r\n    'J',\r\n    'K',\r\n    'L',\r\n    'M',\r\n    'N',\r\n    'O',\r\n    'P',\r\n    'Q',\r\n    'R',\r\n    'S',\r\n    'T',\r\n    'U',\r\n    'V',\r\n    'W',\r\n    'X',\r\n    'Y',\r\n    'Z',\r\n  ];\r\n\r\n  const lower = [\r\n    'a',\r\n    'b',\r\n    'c',\r\n    'd',\r\n    'e',\r\n    'f',\r\n    'g',\r\n    'h',\r\n    'i',\r\n    'j',\r\n    'k',\r\n    'l',\r\n    'm',\r\n    'n',\r\n    'o',\r\n    'p',\r\n    'q',\r\n    'r',\r\n    's',\r\n    't',\r\n    'u',\r\n    'v',\r\n    'w',\r\n    'x',\r\n    'y',\r\n    'z',\r\n  ];\r\n  const nums = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9'];\r\n  const specials = [\r\n    '!',\r\n    '@',\r\n    '#',\r\n    '$',\r\n    '%',\r\n    '^',\r\n    '&',\r\n    '*',\r\n    '(',\r\n    ')',\r\n    '+',\r\n    '-',\r\n    '.',\r\n    '`',\r\n    '~',\r\n    '|',\r\n    '<',\r\n    '>',\r\n    '=',\r\n    '-',\r\n    '_',\r\n  ];\r\n  const allChars = [...upper, ...lower, ...nums, ...specials];\r\n  const generateChar = (arr) => {\r\n    return arr[Math.floor(Math.random() * (arr.length - 1))];\r\n  };\r\n\r\n  const shuffle = (array) => {\r\n    let currentIndex = array.length,\r\n      randomIndex;\r\n\r\n    // While there remain elements to shuffle...\r\n    while (currentIndex != 0) {\r\n      // Pick a remaining element...\r\n      randomIndex = Math.floor(Math.random() * currentIndex);\r\n      currentIndex--;\r\n\r\n      // And swap it with the current element.\r\n      [array[currentIndex], array[randomIndex]] = [\r\n        array[randomIndex],\r\n        array[currentIndex],\r\n      ];\r\n    }\r\n\r\n    return array;\r\n  };\r\n\r\n  const generatePass = () => {\r\n    const newPassArray = [];\r\n    newPassArray.push(generateChar(upper));\r\n    newPassArray.push(generateChar(lower));\r\n    newPassArray.push(generateChar(nums));\r\n    newPassArray.push(generateChar(specials));\r\n    while (newPassArray.length < numChars) {\r\n      newPassArray.push(generateChar(allChars));\r\n    }\r\n    return shuffle(newPassArray).join('');\r\n  };\r\n\r\n  const updatePass = () => {\r\n    return setPass(generatePass());\r\n  };\r\n  return (\r\n    <div>\r\n      <h1>Random Password Generator</h1>\r\n      <div className=\"result\">{pass}</div>\r\n      {/* <label htmlFor=\"charsInput\">Password length</label> */}\r\n      <input\r\n        id=\"charsInput\"\r\n        type=\"number\"\r\n        min=\"8\"\r\n        max=\"20\"\r\n        value={numChars}\r\n        onChange={(event) => setNumChars(event.target.value)}\r\n      />\r\n      <button onClick={updatePass}>Generate</button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Generator;\r\n",{"ruleId":"23","replacedBy":"24"},{"ruleId":"25","replacedBy":"26"},{"ruleId":"27","severity":1,"message":"28","line":97,"column":25,"nodeType":"29","messageId":"30","endLine":97,"endColumn":27},"no-native-reassign",["31"],"no-negated-in-lhs",["32"],"eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","no-global-assign","no-unsafe-negation"]